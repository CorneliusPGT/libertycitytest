{"version":3,"file":"static/js/382.113d52aa.chunk.js","mappings":"iLAkBA,EAVqC,SAACA,GACpC,OACEC,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAACE,EAAAA,GAAO,CAACC,GAAE,YAAAC,OAAcL,EAAMM,IAAMC,UAAU,SAAQL,SACpDF,EAAMQ,QAIf,ECAA,EARiC,SAACR,GAChC,OACEC,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,OAAKM,UAAU,UAASL,SAAEF,EAAMS,QAGtC,E,wCC8EA,EA5E0B,SAACT,GAEzB,IAAMU,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,aAAaH,OAAO,IACzEI,GAAWH,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,aAAaC,QAAQ,IAC3EC,GAASJ,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMI,KAAKD,MAAM,IAGjEE,EAAkBP,EAAQQ,KAAI,SAACC,GAAE,OACnCpB,EAAAA,EAAAA,KAACqB,EAAW,CAACd,KAAMa,EAAGb,KAAMF,GAAIe,EAAGf,IAAM,IAGvCiB,EAAkBP,EAASI,KAAI,SAACC,GAAE,OACpCpB,EAAAA,EAAAA,KAACuB,EAAO,CAACf,KAAMY,EAAGI,QAASnB,GAAIe,EAAGf,IAAM,IAO1C,OAAKW,GAIHS,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACED,EAAAA,EAAAA,KAAC0B,EAAAA,GAAM,CACLC,cAAe,CAAEH,QAAS,IAC1BI,SAAU,SAAAC,GACR,IAAMC,EAAS,CAAC,EAIhB,OAHKD,EAAOL,UACVM,EAAON,QAAU,6BAEZM,CACT,EACAC,SAAU,SAACF,EAAMG,GAAoC,IAAhCC,EAAaD,EAAbC,cAAeC,EAASF,EAATE,UAClCzB,GAAS0B,EAAAA,EAAAA,GAAcN,EAAOL,UAC9BU,EAAU,CAAC,GACXD,GAAc,EAChB,EAAEhC,SAED,SAAAmC,GAAA,IACCP,EAAMO,EAANP,OACAC,EAAMM,EAANN,OACAO,EAAOD,EAAPC,QACAC,EAAYF,EAAZE,aACAC,EAAUH,EAAVG,WACAC,EAAYJ,EAAZI,aACAC,EAAYL,EAAZK,aAAY,OAEZhB,EAAAA,EAAAA,MAAA,QAAMM,SAAUS,EAAavC,SAAA,EAC3BwB,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACED,EAAAA,EAAAA,KAAA,SAAO0C,OAAQH,EAAYI,KAAM,OAAQC,SAAUN,EAAcO,MAAOhB,EAAOL,QAASsB,SAAUL,EAAclC,KAAK,aAGnHP,EAAAA,EAAAA,KAAA,OAAKM,UAAU,eAAcL,SAAE6B,EAAON,SAAWa,EAAQb,SAAWM,EAAON,cAG/ExB,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,sHAEL,KAGXwB,EAAAA,EAAAA,MAAA,WAASnB,UAAU,iBAAgBL,SAAA,EACjCD,EAAAA,EAAAA,KAAA,OAAKM,UAAU,UAASL,SAAEiB,KAC1BlB,EAAAA,EAAAA,KAAA,OAAKM,UAAU,WAAUL,SAAEqB,WA5CxBtB,EAAAA,EAAAA,KAAC+C,EAAAA,GAAQ,CAAC5C,GAAG,YAiDxB,C","sources":["components/Dialogs/DialogItems/DialogItems.tsx","components/Dialogs/Messages/Message.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype Props = {\r\n  name: string,\r\n  id: number\r\n}\r\n\r\nconst DialogItems: React.FC<Props> = (props) => {\r\n  return (\r\n    <div>\r\n      <NavLink to={`/dialogs/${props.id}`} className=\"dialog\">\r\n        {props.name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItems;","import React from \"react\";\r\n\r\ntype Props = \r\n{\r\n  text: string,\r\n  id: number\r\n}\r\n\r\nconst Message: React.FC<Props> = (props) => {\r\n  return (\r\n    <div>\r\n      <div className=\"message\">{props.text}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import \"./Dialogs.css\";\r\nimport DialogItems from \"./DialogItems/DialogItems\";\r\nimport Message from \"./Messages/Message\";\r\nimport React, { useEffect } from \"react\";\r\nimport { SubmitHandler, useForm } from \"react-hook-form\"\r\nimport { DialogType, MessagesType, sendMessageAC } from \"../../redux/dialogsReducer\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/reduxStore\";\r\nimport { Formik } from \"formik\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\ntype ErrorType = {\r\n  message: string\r\n}\r\n\r\nconst Dialogs: React.FC = (props) => {\r\n\r\n  const dispatch = useDispatch()\r\n  const dialogs = useSelector((state: AppStateType) => state.messagesPage.dialogs)\r\n  const messages = useSelector((state: AppStateType) => state.messagesPage.messages)\r\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\r\n  /*  const { register, reset, formState: { errors }, handleSubmit } = useForm<FormData>({}) */\r\n  let dialogsElements = dialogs.map((el) => (\r\n    <DialogItems name={el.name} id={el.id} />\r\n  ));\r\n\r\n  let messagesElement = messages.map((el) => (\r\n    <Message text={el.message} id={el.id} />\r\n  ));\r\n\r\n  /*   const onSubmit: SubmitHandler<FormData> = (formData) => {\r\n      dispatch(actions.sendMessageAC(formData.messageBody));\r\n      reset()\r\n    }; */\r\n  if (!isAuth) {\r\n    return <Navigate to=\"/profile\" />;\r\n  }\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{ message: '' }}\r\n        validate={values => {\r\n          const errors = {} as ErrorType;\r\n          if (!values.message) {\r\n            errors.message = 'Can\\'t mend a broken heart';\r\n          }\r\n          return errors;\r\n        }}\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          dispatch(sendMessageAC(values.message));\r\n          resetForm({})\r\n          setSubmitting(false)\r\n        }}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          isSubmitting,\r\n        }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <div>\r\n              <input onBlur={handleBlur} type={\"text\"} onChange={handleChange} value={values.message} disabled={isSubmitting} name=\"message\"></input>\r\n              {\r\n                /*  {errors.message && touched.message}  */\r\n                <div className=\"errorMessage\">{errors.message && touched.message && errors.message}</div>\r\n              }\r\n            </div>\r\n            <div>\r\n              <button>Отправить сообщение</button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n      <section className=\"dialog-section\">\r\n        <div className=\"dialogs\">{dialogsElements}</div>\r\n        <div className=\"messages\">{messagesElement}</div>\r\n      </section>\r\n\r\n    </div >\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default Dialogs;\r\n"],"names":["props","_jsx","children","NavLink","to","concat","id","className","name","text","dispatch","useDispatch","dialogs","useSelector","state","messagesPage","messages","isAuth","auth","dialogsElements","map","el","DialogItems","messagesElement","Message","message","_jsxs","Formik","initialValues","validate","values","errors","onSubmit","_ref","setSubmitting","resetForm","sendMessageAC","_ref2","touched","handleChange","handleBlur","handleSubmit","isSubmitting","onBlur","type","onChange","value","disabled","Navigate"],"sourceRoot":""}