{"version":3,"file":"static/js/456.b0624012.chunk.js","mappings":"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","sources":["components/Profile/ProfileStatus.tsx","components/Profile/ProfileDataForm.tsx","components/Profile/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx"],"sourcesContent":["import { ChangeEventHandler, useEffect, useState } from \"react\";\r\nimport \"./Status.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateStatusThunk } from \"../../redux/profileReducer\";\r\n\r\ntype Props = \r\n{\r\n  status: string,\r\n  actualId: number | null,\r\n  authId: number | null,\r\n\r\n}\r\n\r\nexport let ProfileStatus: React.FC<Props> = (props) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [status, setStatus] = useState(props.status);\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  let activateEditMode = () => {\r\n    if (props.actualId === props.authId) {\r\n      setEditMode(true);\r\n    }\r\n  };\r\n\r\n  let disableEditMode = () => {\r\n    setEditMode(false);\r\n    dispatch<any>(updateStatusThunk(status));\r\n  };\r\n\r\n  let onStatusChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <p onDoubleClick={activateEditMode}>{props.status}</p>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            autoFocus={true}\r\n            onBlur={disableEditMode}\r\n            value={status}\r\n          ></input>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { FieldArray, Form, Formik } from \"formik\";\r\nimport { Contacts as ContactType, Photos, Profile } from \"../../Types/types\";\r\nimport { ProfileStatus } from \"./ProfileStatus\";\r\nimport { SubmitHandler, useForm } from \"react-hook-form\";\r\nimport { useAppSelector } from \"../../redux/reduxHooks\";\r\n\r\ntype Props =\r\n  {\r\n    profile: Profile,\r\n    saveForm: SubmitHandler<Profile>,\r\n    actualId: number | null,\r\n    authId: number | null,\r\n    status: string\r\n  }\r\n\r\n\r\n\r\nexport const ProfileDataForm: React.FC<Props> = (props) => {\r\n\r\n  const initialValues = props.profile\r\n\r\n\r\n  const onSubmit = (values: Profile) => {\r\n    debugger;\r\n    props.saveForm(values)\r\n  }\r\n\r\n  return (\r\n    <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n      {({ values, errors, touched, handleChange }) =>\r\n      (\r\n        <Form>\r\n          <div>\r\n            <button >Save</button>\r\n          </div>\r\n          <div>\r\n            <input onChange={handleChange} value={values.fullName} name='fullName'></input>\r\n          </div>\r\n          <div>\r\n            <textarea onChange={handleChange} value={values.aboutMe} name='aboutMe'></textarea>\r\n          </div>\r\n          <div>\r\n            <input onChange={handleChange} id=\"lookingForAJob\" type=\"checkbox\" name='lookingForAJob'></input>\r\n            <label htmlFor=\"lookingForAJob\">Looking for a job</label>\r\n          </div>\r\n          <div>\r\n            <textarea onChange={handleChange} value={values.lookingForAJobDescription} name='lookingForAJobDescription'></textarea>\r\n          </div>\r\n          <div>\r\n            <b>Contacts</b>:{\" \"}\r\n            <FieldArray name=\"contacts\" render={() => {\r\n              return <div>\r\n                {Object.keys(props.profile.contacts).map((key) => {\r\n\r\n                  return <div>\r\n                    {key}: <input onChange={handleChange} name={\"contacts.\" + key}></input>\r\n                  </div>\r\n                })}\r\n              </div>\r\n            }}></FieldArray>\r\n\r\n          </div>\r\n        </Form>\r\n      )}\r\n\r\n    </Formik>\r\n  );\r\n};\r\ntype ContactsTypes =\r\n  {\r\n    contactTitle: string,\r\n    contactKey: string\r\n\r\n  }\r\nexport const Contacts: React.FC<ContactsTypes> = ({ contactTitle, contactKey }) => {\r\n  return (\r\n    <div>\r\n      {contactTitle}: {contactKey ? contactKey : \"unknown\"}\r\n    </div>\r\n  );\r\n};\r\n","import \"./ProfileInfo.css\";\r\nimport preloader from \"../../pics/loading.svg\";\r\nimport { ProfileStatus } from \"./ProfileStatus\";\r\nimport React, { ChangeEvent, useState } from \"react\";\r\nimport { Contacts, ProfileDataForm } from \"./ProfileDataForm\";\r\nimport { Contacts as ContactsType, Profile } from \"../../Types/types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/reduxStore\";\r\nimport { saveProfileThunk, sendPhotoThunk } from \"../../redux/profileReducer\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useAppDispatch } from \"../../redux/reduxHooks\";\r\n\r\ntype PropsInfo =\r\n  {\r\n    profile: Profile | null\r\n    isOwner: boolean,\r\n    authId: number | null,\r\n    actualId: number | null,\r\n  }\r\n\r\ntype PropsForm =\r\n  {\r\n    profile: Profile ,\r\n    actualId: number | null,\r\n    authId: number | null,\r\n    isOwner: boolean,\r\n    status: string,\r\n    toEditMode: () => void\r\n\r\n  }\r\n\r\nconst ProfileInfo: React.FC<PropsInfo> = (props) => {\r\n\r\n  const status = useSelector((state: AppStateType) => state.profilePage.status)\r\n\r\n  const dispatch = useAppDispatch()\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const onPicChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      dispatch(sendPhotoThunk(e.target.files[0]));\r\n    }\r\n  };\r\n  const toEditMode = () => {\r\n    setEditMode(true);\r\n  }\r\n\r\n  const saveForm = (data: Profile) => {\r\n    let actualId = props.actualId\r\n    dispatch<any>(saveProfileThunk({ data, id: actualId }));\r\n    setEditMode(false)\r\n  }\r\n\r\n  if (props.profile === null) {\r\n    return (\r\n      <div>\r\n        <img src={preloader}></img>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        <img src=\"https://upload.wikimedia.org/wikipedia/ru/c/c3/Liberty_City_screenshot.png\"></img>\r\n      </div>\r\n      {\r\n        <div>\r\n          <img\r\n            className=\"avatar\"\r\n            src={\r\n              props.profile.photos.large !== null\r\n                ? props.profile.photos.large\r\n                : \"https://seeklogo.com/images/P/public-enemy-logo-E860A8D3AD-seeklogo.com.png\"\r\n            }\r\n          ></img>\r\n          {props.isOwner && <input type=\"file\" onChange={onPicChange}></input>}\r\n        </div>\r\n      }\r\n      <div>\r\n        {editMode ? <ProfileDataForm status={status} profile={props.profile} authId={props.authId} actualId={props.actualId} saveForm={saveForm} /> : <ProfileData status={status} profile={props.profile} actualId={props.actualId} authId={props.authId} isOwner={props.isOwner} toEditMode={toEditMode}></ProfileData>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileData = (props: PropsForm) => {\r\n\r\n  return <div>\r\n    {props.isOwner ? <div><button onClick={props.toEditMode}>Edit</button></div> : null}\r\n    <h2>{props.profile.fullName}</h2>\r\n    <ProfileStatus\r\n      actualId={props.actualId}\r\n      authId={props.authId}\r\n      status={props.status}\r\n    />\r\n    <div>About me: {props.profile.aboutMe}</div>\r\n    <div>Looking for a job: {props.profile.lookingForAJob === true ? \"YES\" : \"NO\"}</div>\r\n    {props.profile.lookingForAJob === true ? <div>Professional Skills: {props.profile.lookingForAJobDescription}</div> : ''}\r\n    <div>\r\n      <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\r\n        return <Contacts contactTitle={key} contactKey={props.profile.contacts[key as keyof ContactsType]} />\r\n      })}\r\n    </div>\r\n  </div>\r\n}\r\n\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport \"./Post.css\";\r\nimport { Profile } from \"../../../../Types/types\";\r\n\r\ntype Props =\r\n  {\r\n    profile: Profile | null\r\n    message: string,\r\n    likeCount: number\r\n  }\r\n\r\nconst Post: React.FC<Props> = (props) => {\r\n  return (\r\n    <div>\r\n      <img\r\n        src={props.profile?.photos.small ? props.profile?.photos.small?.toString() : 'https://seeklogo.com/images/P/public-enemy-logo-E860A8D3AD-seeklogo.com.png'}\r\n        className=\"avatarPost\"\r\n      />\r\n      {props.message}\r\n      <div>{props.likeCount}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport \"./MyPosts.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { SubmitHandler, useForm } from \"react-hook-form\";\r\nimport { reset } from \"redux-form\";\r\nimport { Posts, Profile } from \"../../../Types/types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppStateType} from \"../../../redux/reduxStore\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Formik } from \"formik\";\r\nimport { addPost, getProfile } from \"../../../redux/profileReducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../redux/reduxHooks\";\r\n\r\ntype Props = {\r\nprofile: Profile | null\r\n}\r\n\r\n\r\nconst MyPosts: React.FC<Props> = React.memo((props) => {\r\n\r\n  const dispatch = useAppDispatch()\r\n  const posts = useAppSelector((state) => state.profilePage.posts)\r\n\r\n  type FormData =\r\n    {\r\n      postText: string\r\n    }\r\n\r\n  let postResult = posts.map((c) => (\r\n    <Post profile={props.profile} message={c.message} likeCount={c.likeCount} />\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <h3>My posts</h3>\r\n      <Formik initialValues={{ postText: '' }}\r\n        validate={values => {\r\n          const errors = {} as { postText: string };\r\n          if (!values.postText) {\r\n            errors.postText = 'Can\\'t mend a broken heart';\r\n          }\r\n          return errors;\r\n        }}\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          dispatch(addPost(values.postText));\r\n          resetForm({})\r\n          setSubmitting(false)\r\n        }}>\r\n        {({ values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          isSubmitting, }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <div>\r\n              <textarea onChange={handleChange} value={values.postText} disabled={isSubmitting} className={errors.postText ? \"errorField\" : \"\"}\r\n                name=\"postText\"\r\n              ></textarea>\r\n              {errors && (\r\n                <div className=\"errorMessage\">{errors.postText && touched.postText && errors.postText}</div>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <button>Add post</button>\r\n            </div>\r\n          </form>\r\n        )\r\n        }\r\n      </Formik>\r\n      <div>{postResult}</div>\r\n    </div >\r\n  );\r\n});\r\n\r\nexport default MyPosts;\r\n","\r\nimport React, { useEffect } from \"react\";\r\n\r\nimport \"./Profile.css\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport { Navigate, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/reduxStore\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getProfile, getStatus } from \"../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\n\r\n\r\ntype ParamsType =\r\n  {\r\n    id: string\r\n  }\r\n\r\nconst Profile: React.FC = () => {\r\n\r\n  const dispatch = useDispatch()\r\n  const authId = useSelector((state: AppStateType) => state.auth.id)\r\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n  const profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n  let { id } = useParams<ParamsType>();\r\n  let id1: number | null = Number(id);\r\n  let isOwner = false;\r\n  if (!id1) {\r\n    id1 = authId;\r\n  }\r\n  if (authId === id1) {\r\n    isOwner = true\r\n  }\r\n  else isOwner = false\r\n\r\n  useEffect(() => {\r\n    if (id1 !== null) {\r\n      dispatch<any>(getProfile(id1));\r\n      dispatch<any>(getStatus(id1));\r\n    }\r\n  }, [id1]);\r\n  if (!isAuth) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n  return (\r\n    <div className={\"content\"}>\r\n      <div>\r\n        <ProfileInfo profile={profile} isOwner={isOwner} actualId={authId} authId={id1} />\r\n        <MyPosts profile={profile}/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"names":["ProfileStatus","props","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","dispatch","useDispatch","useEffect","_jsxs","children","_jsx","onDoubleClick","actualId","authId","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatusThunk","ProfileDataForm","initialValues","profile","Formik","onSubmit","values","saveForm","_ref","handleChange","errors","touched","Form","fullName","name","aboutMe","id","type","htmlFor","lookingForAJobDescription","FieldArray","render","Object","keys","contacts","map","key","Contacts","_ref2","contactTitle","contactKey","ProfileData","isOwner","onClick","toEditMode","lookingForAJob","useSelector","state","profilePage","useAppDispatch","src","preloader","className","photos","large","_e$target$files","target","files","length","sendPhotoThunk","data","saveProfileThunk","_props$profile","_props$profile2","_props$profile2$photo","small","toString","message","likeCount","React","postResult","useAppSelector","posts","c","Post","postText","validate","setSubmitting","resetForm","addPost","handleSubmit","handleBlur","isSubmitting","disabled","auth","isAuth","useParams","id1","Number","getProfile","getStatus","ProfileInfo","MyPosts","Navigate","to"],"sourceRoot":""}