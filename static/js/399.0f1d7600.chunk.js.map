{"version":3,"file":"static/js/399.0f1d7600.chunk.js","mappings":"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","sources":["pages/Chat/ChatPage.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\"\r\nimport './Chat.css'\r\nimport { useDispatch } from \"react-redux\"\r\nimport { getReceivedMessages, sendChatMessage, stopReceivedMessages } from \"../../redux/chatReducer\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { AppStateType } from \"../../redux/reduxStore\"\r\nimport { NavLink, Navigate } from \"react-router-dom\"\r\nimport { useAppDispatch } from \"../../redux/reduxHooks\"\r\n\r\ntype ChatMessageType =\r\n    {\r\n        message: string\r\n        photo: string\r\n        userId: number\r\n        userName: string\r\n    }\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat></Chat>\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = React.memo(() => {\r\n\r\n    let status = useSelector((state: AppStateType) => state.chat.status)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\r\n    const dispatch = useAppDispatch()\r\n    useEffect(() => {\r\n        debugger\r\n        dispatch(getReceivedMessages())\r\n        return () => {\r\n            dispatch(stopReceivedMessages())\r\n        }\r\n    }, [])\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to=\"/profile\" />;\r\n    } else\r\n        return <div>\r\n            {status === 'error' ? <div>Error. Please restart page</div> :\r\n                <div>\r\n                    <Messages></Messages>\r\n                    <AddMessages></AddMessages>\r\n                </div>}\r\n        </div>\r\n})\r\n\r\nconst Messages: React.FC = React.memo(() => {\r\n    const [autoScroll, setAutoScroll] = useState(false)\r\n    let messageAnchorRef = useRef<HTMLDivElement>(null)\r\n    let messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    useEffect(() => {\r\n        if (autoScroll) {\r\n            messageAnchorRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n        }\r\n\r\n    }, [messages])\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let el = e.currentTarget\r\n        if (Math.abs((el.scrollHeight - el.scrollTop) - el.clientHeight) < 300) {\r\n            setAutoScroll(true)\r\n        } else {\r\n            setAutoScroll(false)\r\n        }\r\n    }\r\n    return <div style={{ height: 780, overflowY: 'auto' }} onScroll={scrollHandler}>\r\n        {messages.map((c) => <Message message={c}></Message>)}\r\n        <div ref={messageAnchorRef}></div>\r\n    </div>\r\n})\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = React.memo(({ message }) => {\r\n\r\n    return <div className=\"singleMessage\">\r\n        <NavLink to={\"/profile/\" + message.userId}>\r\n            <div><b>{message.userName}</b> </div>\r\n        </NavLink>\r\n        <img src={message.photo}></img>\r\n        <div>{message.message}</div>\r\n    </div>\r\n})\r\n\r\n\r\n\r\nconst AddMessages: React.FC = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    let status = useSelector((state: AppStateType) => state.chat.status)\r\n    let [message, setMessage] = useState('')\r\n    const sendMessage = () => {\r\n        dispatch<any>(sendChatMessage(message))\r\n        setMessage(\"\")\r\n    }\r\n    return <div className={'sendWindow'} >\r\n        <div >\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n            <button disabled={status !== 'ready'} onClick={sendMessage}>Send</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage"],"names":["Chat","React","status","useSelector","state","chat","isAuth","auth","dispatch","useAppDispatch","useEffect","getReceivedMessages","stopReceivedMessages","_jsx","children","_jsxs","Messages","AddMessages","Navigate","to","_useState","useState","_useState2","_slicedToArray","autoScroll","setAutoScroll","messageAnchorRef","useRef","messages","_messageAnchorRef$cur","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","el","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","c","Message","message","ref","_ref","className","NavLink","userId","userName","src","photo","_useState3","_useState4","setMessage","onChange","value","disabled","onClick","sendChatMessage"],"sourceRoot":""}