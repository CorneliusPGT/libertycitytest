{"version":3,"file":"static/js/311.25554631.chunk.js","mappings":"0QASaA,GAAcC,E,QAAAA,KALI,SAACC,GAE5B,OAAOA,EAAMC,UAAUC,KAC3B,IAE2D,SAACA,GAExD,OAAOA,CACX,IAEaC,EAAiB,SAACH,GAE3B,OAAOA,EAAMC,UAAUG,QAC3B,EAEaC,EAAmB,SAACL,GAE7B,OAAOA,EAAMC,UAAUK,UAC3B,EAEaC,EAAoB,SAACP,GAE9B,OAAOA,EAAMC,UAAUO,WAC3B,EAEaC,EAAgB,SAACT,GAE1B,OAAOA,EAAMC,UAAUS,SAC3B,EAEaC,EAAmB,SAACX,GAE7B,OAAOA,EAAMC,UAAUW,UAC3B,EAEaC,EAAoB,SAACb,GAE9B,OAAOA,EAAMC,UAAUa,MAC3B,E,mBCtBWC,EAAkB,WAE3B,IAAMb,GAAQc,EAAAA,EAAAA,IAAYlB,GACpBQ,GAAaU,EAAAA,EAAAA,IAAYX,GACzBO,GAAaI,EAAAA,EAAAA,IAAYL,GACzBP,GAAWY,EAAAA,EAAAA,IAAYb,GACvBK,GAAcQ,EAAAA,EAAAA,IAAYT,GAC1BO,GAASE,EAAAA,EAAAA,IAAYH,GAGrBI,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAGjBC,GAFmBF,EAASG,OAApBA,QASJC,EAAAA,EAAAA,IAAkB,CACpBC,aAAc,MAAOC,cAAe,CAAEC,KAAMd,EAAOc,KAAMC,OAAQf,EAAOe,WAPxEC,EAAQP,EAARO,SACAC,EAAYR,EAAZQ,aAsBEC,GArBMT,EAARU,SACmBV,EAAnBW,UAAaC,OACRZ,EAALa,MACWb,EAAXc,YAkBoB,SAACvB,GACrBG,GAAcqB,EAAAA,EAAAA,IAAc,EAAGlC,EAAUU,GAC3C,IAKAyB,EAAAA,EAAAA,YAAU,WACRtB,GAAcqB,EAAAA,EAAAA,IAAc9B,EAAaJ,EAAUU,GACrD,GAAG,IAYH,IATA,IAAI0B,EAAaC,KAAKC,KAAKpC,EAAaF,GACxCuC,GAAgCC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC5BI,GAA8BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC1BG,GAA8BT,EAAAA,EAAAA,UAASpC,GAAY8C,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA9CE,EAAYD,EAAA,GAAEE,EAAOF,EAAA,GAItBG,EAAQ,GAEHC,EAAIX,EAAWW,GAAKP,EAAUO,IACrCD,EAAME,KAAKD,GAwCb,OAlBAnB,EAAAA,EAAAA,YAAU,WACRpB,EAAS,CACPK,OAAO,SAADoC,OAAW9C,EAAOc,KAAI,YAAAgC,OAAW9C,EAAOe,SAElD,GAAG,CAACf,KAEJyB,EAAAA,EAAAA,YAAU,WACR,IAAMsB,EAASC,EAAAA,EAAYC,MAAM1C,EAASG,QACtCwC,EAAYlD,EACV+C,EAAOjC,OAAMoC,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQD,GAAS,IAAEpC,KAAMiC,EAAOjC,QACtDiC,EAAOhC,SAAQmC,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQD,GAAS,IAAEnC,OAA0B,SAAlBgC,EAAOhC,OAAoB,OAA2B,SAAlBgC,EAAOhC,OAAoB,OAAS,WACjIZ,GAAcqB,EAAAA,EAAAA,IAAc9B,EAAaJ,EAAU4D,GACrD,GAAG,KAEHzB,EAAAA,EAAAA,YAAU,WACRiB,EAAQhD,EACV,GAAG,CAACA,KAGF0D,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,OAAKE,UAAU,WAAUD,SAAA,EACvBE,EAAAA,EAAAA,KAAA,OAAAF,SACG7D,GAAa4D,EAAAA,EAAAA,MAAA,MAAIE,UAAU,aAAYD,SAAA,CACrCpB,EAAY,GAAIsB,EAAAA,EAAAA,KAAA,UAAQC,QA5BnB,WACdtB,EAAaD,GAAa,IAC1BK,EAAYD,EAAWJ,EAAY,EACrC,EAyBsDoB,SAAC,SAAgB,KAC5DV,EAAMc,KAAI,SAACC,GACV,OACEH,EAAAA,EAAAA,KAAA,MACEC,QAAS,YApEL,SAACE,GACnBvD,GAAcqB,EAAAA,EAAAA,IAAckC,EAAGpE,EAAUU,GAC3C,CAmEkB2D,CAAcD,EAChB,EACAJ,UAAWI,IAAMjB,EAAe,oBAAiBmB,EAAUP,SAE1DK,GAGP,IACCrB,EAAWX,GAAa6B,EAAAA,EAAAA,KAAA,UAAQC,QAvD3B,WAEVnB,EAAW,IAAMX,GACnBQ,EAAaD,GAAa,IAC1BK,EAAYD,GAAY,MAIxBC,EAAYD,GAAYX,EAAaW,GACrCH,EAAaD,GAAa,IAG9B,EA2C8DoB,SAAC,SAAgB,SAE/DE,EAAAA,EAAAA,KAAA,OAAAF,SAAK,oGAIfD,EAAAA,EAAAA,MAAA,QAAMS,SAAU5C,GA3FoB,SAAC6C,GAEzC5C,EAAgB4C,EAClB,IAwF6CT,SAAA,EACrCE,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAAA,SAAAJ,EAAAA,EAAAA,GAAA,GAAWnC,EAAS,aAEtBuC,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAAA,UAAQD,UAAU,eAAcD,SAAC,cAEnCE,EAAAA,EAAAA,KAAA,OAAAF,UACED,EAAAA,EAAAA,MAAA,UAAAD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYnC,EAAS,WAAS,IAAAqC,SAAA,EAC5BE,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,OAAMV,SAAC,SACrBE,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,OAAMV,SAAC,mBACrBE,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,QAAOV,SAAC,gCAM5BjE,EAAMqE,KAAI,SAACO,GAAC,OACVZ,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEE,EAAAA,EAAAA,KAACU,EAAAA,GAAO,CAACC,GAAI,YAAcF,EAAEG,GAAGd,UAC9BE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,UACbc,IACoB,MAAlBJ,EAAEK,OAAOC,MACL,8EACAN,EAAEK,OAAOC,WAInBf,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAAA,QAAAF,SAAOW,EAAEO,UAEXhB,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAAA,QAAAF,SAAOW,EAAEQ,YAEXjB,EAAAA,EAAAA,KAAA,OAAAF,SACGW,EAAES,UACDlB,EAAAA,EAAAA,KAAA,UACEmB,SAAU5E,EAAW6E,MAAK,SAACR,GAAE,OAAKA,IAAOH,EAAEG,EAAE,IAC7CX,QAAS,WArIR,IAACoB,IAsISZ,EAAEG,GArI3BhE,GAAc0E,EAAAA,EAAAA,IAAcD,GAsId,EAAEvB,SACH,cAIDE,EAAAA,EAAAA,KAAA,UACEmB,SAAU5E,EAAW6E,MAAK,SAACR,GAAE,OAAKA,IAAOH,EAAEG,EAAE,IAC7CX,QAAS,WAlJV,IAACoB,IAmJSZ,EAAEG,GAlJzBhE,GAAc2E,EAAAA,EAAAA,IAAYF,GAmJZ,EAAEvB,SACH,eAKD,MAIhB,E,wBCjMW0B,EAA2B,WAEpC,IAAMnF,GAAYM,EAAAA,EAAAA,IAAYP,GAE9B,OACEyD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEE,EAAAA,EAAAA,KAAA,OAAAF,SAAMzD,GAAY2D,EAAAA,EAAAA,KAAA,OAAKa,IAAKY,EAAAA,IAAgB,QAC5CzB,EAAAA,EAAAA,KAACtD,EAAK,MAIZ,EAEA,GAAegF,EAAAA,EAAAA,KCbR,SAA0BC,GAmB/B,OAFwBC,EAAAA,EAAAA,KAhBF,SAACjG,GAAmB,MACzC,CACCkG,OAAQlG,EAAMmG,KAAKD,OACpB,GAagD,CAAC,EAA1BD,EAXyB,SAACG,GAChD,IAAIjF,GAAWC,EAAAA,EAAAA,MAOf,OANAmB,EAAAA,EAAAA,YAAU,WACR,IAAqB,IAAjB6D,EAAMF,OACR,OAAO/E,EAAS,WAEpB,GAAG,CAACiF,EAAMF,UAEH7B,EAAAA,EAAAA,KAAC2B,GAAS/B,EAAAA,EAAAA,GAAA,GAAKmC,GACxB,GAOF,IDT8DH,EAAAA,EAAAA,IAAQ,KAAM,CAE5E,GAFA,CAEIJ,E","sources":["redux/usersSelectors.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/HOC/withAuthRedirect.tsx"],"sourcesContent":["import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./reduxStore\";\r\n\r\n\r\nexport const baseSelectUsers = (state: AppStateType) =>\r\n{\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const selectUsers = createSelector(baseSelectUsers, (users) =>\r\n{\r\n    return users;\r\n})\r\n\r\nexport const selectPageSize = (state: AppStateType) =>\r\n{\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const selectTotalCount = (state: AppStateType) =>\r\n{\r\n    return state.usersPage.totalCount\r\n}\r\n\r\nexport const selectCurrentPage = (state: AppStateType) =>\r\n{\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const selectLoading = (state: AppStateType) =>\r\n{\r\n    return state.usersPage.isLoading\r\n}\r\n\r\nexport const selectloadFollow = (state: AppStateType) =>\r\n{\r\n    return state.usersPage.loadFollow\r\n}\r\n\r\nexport const selectFilterUsers = (state: AppStateType) =>\r\n{\r\n    return state.usersPage.filter\r\n}","\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Users.css\";\r\nimport { Button, Space, DatePicker, version } from 'antd';\r\nimport { NavLink, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { SubmitHandler, useForm } from \"react-hook-form\";\r\nimport { FilterType, followThunk, getUsersThunk, unfollowThunk } from \"../../redux/usersReducer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectCurrentPage, selectFilterUsers, selectPageSize, selectTotalCount, selectUsers, selectloadFollow } from \"../../redux/usersSelectors\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport queryString from \"query-string\";\r\n\r\ntype FormData =\r\n  {\r\n    term: string,\r\n    friend: string | null\r\n  }\r\n\r\n\r\n\r\nexport let Users: React.FC = () => {\r\n\r\n  const users = useSelector(selectUsers)\r\n  const totalCount = useSelector(selectTotalCount)\r\n  const loadFollow = useSelector(selectloadFollow)\r\n  const pageSize = useSelector(selectPageSize)\r\n  const currentPage = useSelector(selectCurrentPage)\r\n  const filter = useSelector(selectFilterUsers)\r\n\r\n\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n  const location = useLocation()\r\n  const { search } = location.search\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setError,\r\n    formState: { errors },\r\n    reset,\r\n    clearErrors,\r\n  } = useForm<FormData>({\r\n    criteriaMode: \"all\", defaultValues: { term: filter.term, friend: filter.friend }\r\n  });\r\n\r\n  const follow = (userId: number) => {\r\n    dispatch<any>(followThunk(userId))\r\n  }\r\n\r\n  const unfollow = (userId: number) => {\r\n    dispatch<any>(unfollowThunk(userId))\r\n  }\r\n\r\n  const onSubmit: SubmitHandler<FormData> = (formData) => {\r\n\r\n    onFilterChanged(formData)\r\n  }\r\n\r\n  let onFilterChanged = (filter: FilterType) => {\r\n    dispatch<any>(getUsersThunk(1, pageSize, filter));\r\n  }\r\n  let onPageChanged = (p: number) => {\r\n    dispatch<any>(getUsersThunk(p, pageSize, filter));\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch<any>(getUsersThunk(currentPage, pageSize, filter));\r\n  }, []);\r\n\r\n\r\n  let pagesCount = Math.ceil(totalCount / pageSize);\r\n  let [firstPage, setFirstPage] = useState(1);\r\n  let [lastPage, setLastPage] = useState(10);\r\n  let [currentPageS, setPage] = useState(currentPage)\r\n\r\n\r\n\r\n  let pages = [];\r\n\r\n  for (let i = firstPage; i <= lastPage; i++) {\r\n    pages.push(i)\r\n  }\r\n\r\n  let nextPages = () => {\r\n\r\n    if (lastPage + 10 <= pagesCount) {\r\n      setFirstPage(firstPage += 10);\r\n      setLastPage(lastPage += 10)\r\n    }\r\n\r\n    else {\r\n      setLastPage(lastPage += pagesCount - lastPage);\r\n      setFirstPage(firstPage += 10);\r\n\r\n    }\r\n  }\r\n\r\n  let prevPages = () => {\r\n    setFirstPage(firstPage -= 10);\r\n    setLastPage(lastPage = firstPage + 9)\r\n  }\r\n\r\n  useEffect(() => {\r\n    navigate({\r\n      search: `?term=${filter.term}&friend=${filter.friend}`\r\n    });\r\n  }, [filter])\r\n\r\n  useEffect(() => {\r\n    const values = queryString.parse(location.search) as { term: string, page: string, friend: string }\r\n    let actFilter = filter;\r\n    if (!!values.term) actFilter = { ...actFilter, term: values.term as string }\r\n    if (!!values.friend) actFilter = { ...actFilter, friend: values.friend === \"null\" ? \"null\" : values.friend === \"true\" ? \"true\" : \"false\" }\r\n    dispatch<any>(getUsersThunk(currentPage, pageSize, actFilter));\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setPage(currentPage)\r\n  }, [currentPage])\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"topUsers\">\r\n        <div>\r\n          {totalCount ? <ul className=\"pagination\">\r\n            {firstPage > 1 ? <button onClick={prevPages}>PREV</button> : null}\r\n            {pages.map((p) => {\r\n              return (\r\n                <li\r\n                  onClick={() => {\r\n                    onPageChanged(p);\r\n                  }}\r\n                  className={p === currentPageS ? 'selectedPage' : undefined}\r\n                >\r\n                  {p}\r\n                </li>\r\n              );\r\n            })}\r\n            {lastPage < pagesCount ? <button onClick={nextPages}>NEXT</button> : null}\r\n\r\n          </ul> : <div>Ничего не найдено</div>\r\n          }\r\n\r\n        </div>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <input {...register(\"term\")}></input>\r\n          </div>\r\n          <div>\r\n            <button className=\"searchButton\">Search</button>\r\n          </div>\r\n          <div>\r\n            <select {...register(\"friend\")}>\r\n              <option value=\"null\">All</option>\r\n              <option value=\"true\">Only followed</option>\r\n              <option value=\"false\">Only unfollowed</option>\r\n            </select>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      {\r\n        users.map((u) => (\r\n          <div>\r\n            <NavLink to={\"/profile/\" + u.id}>\r\n              <img className=\"userAva\"\r\n                src={\r\n                  u.photos.small == null\r\n                    ? \"https://seeklogo.com/images/P/public-enemy-logo-E860A8D3AD-seeklogo.com.png\"\r\n                    : u.photos.small\r\n                }\r\n              ></img>\r\n            </NavLink>\r\n            <div>\r\n              <span>{u.name}</span>\r\n            </div>\r\n            <div>\r\n              <span>{u.status}</span>\r\n            </div>\r\n            <div>\r\n              {u.followed ? (\r\n                <button\r\n                  disabled={loadFollow.some((id) => id === u.id)}\r\n                  onClick={() => {\r\n                    unfollow(u.id);\r\n                  }}\r\n                >\r\n                  Unfollow\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  disabled={loadFollow.some((id) => id === u.id)}\r\n                  onClick={() => {\r\n                    follow(u.id);\r\n                  }}\r\n                >\r\n                  Follow\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport React from \"react\";\r\nimport \"./Users.css\";\r\nimport { Users } from \"./Users\";\r\nimport preloader from \"../../pics/loading.svg\"\r\nimport { withAuthRedirect } from \"../HOC/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { selectLoading } from \"../../redux/usersSelectors\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport let UsersContainer: React.FC = () => {\r\n\r\n  const isLoading = useSelector(selectLoading)\r\n\r\n  return (\r\n    <div>\r\n      <div>{isLoading ? <img src={preloader} /> : null}</div>\r\n      <Users\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default compose<React.ComponentType>(withAuthRedirect, connect(null, {\r\n\r\n}))(UsersContainer);","import React, { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/reduxStore\";\r\n\r\ntype MapStateProps =\r\n  {\r\n    isAuth: boolean\r\n  }\r\n\r\n\r\nexport function withAuthRedirect(Component: React.ComponentType<MapStateProps>) {\r\n  let mapStateToProps = (state: AppStateType): MapStateProps =>\r\n  ({\r\n    isAuth: state.auth.isAuth\r\n  })\r\n\r\n  let RedirectComponent: React.FC<MapStateProps> = (props) => {\r\n    let navigate = useNavigate();\r\n    useEffect(() => {\r\n      if (props.isAuth === false) {\r\n        return navigate(\"../login\");\r\n      }\r\n    }, [props.isAuth]);\r\n\r\n    return <Component {...props}></Component>\r\n  };\r\n\r\n  let UltimateComponent = connect(mapStateToProps, {})(RedirectComponent)\r\n\r\n  return UltimateComponent;\r\n\r\n\r\n};\r\n"],"names":["selectUsers","createSelector","state","usersPage","users","selectPageSize","pageSize","selectTotalCount","totalCount","selectCurrentPage","currentPage","selectLoading","isLoading","selectloadFollow","loadFollow","selectFilterUsers","filter","Users","useSelector","dispatch","useDispatch","navigate","useNavigate","location","useLocation","_useForm","search","useForm","criteriaMode","defaultValues","term","friend","register","handleSubmit","onFilterChanged","setError","formState","errors","reset","clearErrors","getUsersThunk","useEffect","pagesCount","Math","ceil","_useState","useState","_useState2","_slicedToArray","firstPage","setFirstPage","_useState3","_useState4","lastPage","setLastPage","_useState5","_useState6","currentPageS","setPage","pages","i","push","concat","values","queryString","parse","actFilter","_objectSpread","_jsxs","children","className","_jsx","onClick","map","p","onPageChanged","undefined","onSubmit","formData","value","u","NavLink","to","id","src","photos","small","name","status","followed","disabled","some","userId","unfollowThunk","followThunk","UsersContainer","preloader","compose","Component","connect","isAuth","auth","props"],"sourceRoot":""}